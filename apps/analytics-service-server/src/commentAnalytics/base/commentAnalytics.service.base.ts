/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CommentAnalytics as PrismaCommentAnalytics,
} from "@prisma/client";

export class CommentAnalyticsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CommentAnalyticsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.commentAnalytics.count(args);
  }

  async commentAnalyticsItems(
    args: Prisma.CommentAnalyticsFindManyArgs
  ): Promise<PrismaCommentAnalytics[]> {
    return this.prisma.commentAnalytics.findMany(args);
  }
  async commentAnalytics(
    args: Prisma.CommentAnalyticsFindUniqueArgs
  ): Promise<PrismaCommentAnalytics | null> {
    return this.prisma.commentAnalytics.findUnique(args);
  }
  async createCommentAnalytics(
    args: Prisma.CommentAnalyticsCreateArgs
  ): Promise<PrismaCommentAnalytics> {
    return this.prisma.commentAnalytics.create(args);
  }
  async updateCommentAnalytics(
    args: Prisma.CommentAnalyticsUpdateArgs
  ): Promise<PrismaCommentAnalytics> {
    return this.prisma.commentAnalytics.update(args);
  }
  async deleteCommentAnalytics(
    args: Prisma.CommentAnalyticsDeleteArgs
  ): Promise<PrismaCommentAnalytics> {
    return this.prisma.commentAnalytics.delete(args);
  }
}

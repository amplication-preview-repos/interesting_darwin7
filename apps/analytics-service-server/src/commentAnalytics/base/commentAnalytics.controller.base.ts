/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CommentAnalyticsService } from "../commentAnalytics.service";
import { CommentAnalyticsCreateInput } from "./CommentAnalyticsCreateInput";
import { CommentAnalytics } from "./CommentAnalytics";
import { CommentAnalyticsFindManyArgs } from "./CommentAnalyticsFindManyArgs";
import { CommentAnalyticsWhereUniqueInput } from "./CommentAnalyticsWhereUniqueInput";
import { CommentAnalyticsUpdateInput } from "./CommentAnalyticsUpdateInput";

export class CommentAnalyticsControllerBase {
  constructor(protected readonly service: CommentAnalyticsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CommentAnalytics })
  async createCommentAnalytics(
    @common.Body() data: CommentAnalyticsCreateInput
  ): Promise<CommentAnalytics> {
    return await this.service.createCommentAnalytics({
      data: data,
      select: {
        commentId: true,
        createdAt: true,
        id: true,
        likes: true,
        postId: true,
        replies: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CommentAnalytics] })
  @ApiNestedQuery(CommentAnalyticsFindManyArgs)
  async commentAnalyticsItems(
    @common.Req() request: Request
  ): Promise<CommentAnalytics[]> {
    const args = plainToClass(CommentAnalyticsFindManyArgs, request.query);
    return this.service.commentAnalyticsItems({
      ...args,
      select: {
        commentId: true,
        createdAt: true,
        id: true,
        likes: true,
        postId: true,
        replies: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CommentAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async commentAnalytics(
    @common.Param() params: CommentAnalyticsWhereUniqueInput
  ): Promise<CommentAnalytics | null> {
    const result = await this.service.commentAnalytics({
      where: params,
      select: {
        commentId: true,
        createdAt: true,
        id: true,
        likes: true,
        postId: true,
        replies: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CommentAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCommentAnalytics(
    @common.Param() params: CommentAnalyticsWhereUniqueInput,
    @common.Body() data: CommentAnalyticsUpdateInput
  ): Promise<CommentAnalytics | null> {
    try {
      return await this.service.updateCommentAnalytics({
        where: params,
        data: data,
        select: {
          commentId: true,
          createdAt: true,
          id: true,
          likes: true,
          postId: true,
          replies: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CommentAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCommentAnalytics(
    @common.Param() params: CommentAnalyticsWhereUniqueInput
  ): Promise<CommentAnalytics | null> {
    try {
      return await this.service.deleteCommentAnalytics({
        where: params,
        select: {
          commentId: true,
          createdAt: true,
          id: true,
          likes: true,
          postId: true,
          replies: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

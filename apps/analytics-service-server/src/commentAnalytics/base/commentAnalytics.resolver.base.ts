/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CommentAnalytics } from "./CommentAnalytics";
import { CommentAnalyticsCountArgs } from "./CommentAnalyticsCountArgs";
import { CommentAnalyticsFindManyArgs } from "./CommentAnalyticsFindManyArgs";
import { CommentAnalyticsFindUniqueArgs } from "./CommentAnalyticsFindUniqueArgs";
import { CreateCommentAnalyticsArgs } from "./CreateCommentAnalyticsArgs";
import { UpdateCommentAnalyticsArgs } from "./UpdateCommentAnalyticsArgs";
import { DeleteCommentAnalyticsArgs } from "./DeleteCommentAnalyticsArgs";
import { CommentAnalyticsService } from "../commentAnalytics.service";
@graphql.Resolver(() => CommentAnalytics)
export class CommentAnalyticsResolverBase {
  constructor(protected readonly service: CommentAnalyticsService) {}

  async _commentAnalyticsItemsMeta(
    @graphql.Args() args: CommentAnalyticsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CommentAnalytics])
  async commentAnalyticsItems(
    @graphql.Args() args: CommentAnalyticsFindManyArgs
  ): Promise<CommentAnalytics[]> {
    return this.service.commentAnalyticsItems(args);
  }

  @graphql.Query(() => CommentAnalytics, { nullable: true })
  async commentAnalytics(
    @graphql.Args() args: CommentAnalyticsFindUniqueArgs
  ): Promise<CommentAnalytics | null> {
    const result = await this.service.commentAnalytics(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CommentAnalytics)
  async createCommentAnalytics(
    @graphql.Args() args: CreateCommentAnalyticsArgs
  ): Promise<CommentAnalytics> {
    return await this.service.createCommentAnalytics({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CommentAnalytics)
  async updateCommentAnalytics(
    @graphql.Args() args: UpdateCommentAnalyticsArgs
  ): Promise<CommentAnalytics | null> {
    try {
      return await this.service.updateCommentAnalytics({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CommentAnalytics)
  async deleteCommentAnalytics(
    @graphql.Args() args: DeleteCommentAnalyticsArgs
  ): Promise<CommentAnalytics | null> {
    try {
      return await this.service.deleteCommentAnalytics(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
